/**
 * 单例模式（单子模式）：确保某个类只有一个实例，
 * 而且自行实例化并向整个系统提供这个实例的单例模式；
 * 适用在有真正“单一实例”需求时；
 * 
 * 下面介绍4种写法：
 * 第一种方法：多线程中不能正常工作；
 *     1.声明一个私有的静态的当前类的对象；
 * 	   2.让构造器私有；
 * 	   3.声明一个公共的静态返回自己的方法；
 *     4.在该方法内部将当前类的对象自行实例化；
 * 第二种方法：适用多线程，但效率低；
 *     同第一种方法，唯一的不同就是在声明方法时加一个“synchronized”表示同步的关键字；
 * （常用）第三种方法：应用内部类实现，适用于多线程，采用的是classloader机制保证实例化时只有一个线程，是比较安全的单子模式，但编写有点麻烦；
 * 	   1.编写一个私有的静态的内部类，在类中实现“单一实例”（是私有的静态的常量）；
 * 	   2.让构造器私有；
 *     3.声明一个公共的静态返回自己的方法；
 *     4.在该方法的内部返回内部类中的对象常量；
 * 第四种方法：是第二种方法的升级版，又称双重检查锁定版；
 * 	   1.声明一个私有的静态的当前类的对象，但要加上volatail类型修饰符；
 * 	   2.让构造器私有；
 * 	   3.声明一个公共的静态返回自己的方法；
 *     4.在该方法内部将当前类的对象自行实例化，但用synchronized关键字进行锁定当前类；
 */
