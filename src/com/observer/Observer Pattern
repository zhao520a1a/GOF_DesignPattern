观察者模式：它解除了观察者和目标之间的耦合关系；目标不需要了解观察者具体信息，只是当目标产生一个事件时，简单地将时间传给每一个观察者。
		         简而言之，就是定义了一个一对多的依赖关系；多个观察者对象同时监听一个主题，使观察者队对象能随目标状态的变化而自动更新；
		 
观察者模式角色定义：
抽象主题(Subject)角色：把所有的观察者对象的引用保存在一个列表里，可以加上或撤销观察者对象；又叫做抽象被观察者角色；(将对观察者的统一操作放在其中)
具体主题(ConcreteSubject)角色： 保存对具体观察者对象有用的内部状态，当内部状态改变时给其观察者发出一个通知；又叫做具体被观察者角色；
抽象观察者(Observer)角色：为所有的具体观察者定义了一个接口，在得到通知时更新自己；
具体观察者(ConcreteObserver)角色：保存一个指向具体主题对象的引用和一个与主题状态相符的状态；要实现抽象观察者角色要求的方法，为了同主题状态相符；

注：一般用的时候具体观察者是和具体主题（因为其中有当前主题的状态）相互通信的，而抽象观察者和抽象主题只起到将统一操作继承的作用；

优点：
	1.它解除了观察者和目标之间的耦合关系；目标不需要了解观察者具体信息，只知道它们共有的接口（AbstractObserver）即可；
	   被观察者和观察者可以属于不同的抽象化层次；
	2.它支持广播通信，被观察者会向所有的观察者发出通知；

缺点：
	1.若（直接/间接）观察者过多，通知所有的观察者会花费很多时间；
	2.若被观察者之间有循环依赖（互相观察），可能会导致系统崩溃；
	3.若采用异步（采用另一个线程）通知观察者的话，系统必须保证自动恰当的方式进行；
	4.其中观察者仅仅知道被观察者发生了什么变化，但是它没有机制使观察者知道被观察者如何发生变化的；