静态代理模式：当两个类需要通信时，引入第三方代理类，将两个类的关系解耦，让我们只了解代理类即可。

角色：
	客户， 抽象实体， 具体实体， 代理
代理角色（Proxy类）：保留了一个引用使得代理可以访问实体，同样实现了抽象实体的接口，这样代理就可以替代实体了；
代理类的作用：负责为委托类预处理、过滤、转发消息，以及消息被委托类处理后的后续工作；

注意：为了保持代理和实体行为的一致性，两者通常会实现相同的接口，因为代理类中会调用委托类的方法；

优点：
	使客户端不需要知道实现类（委托类）的信息，只需知道代理即可；
缺点：
1.可能出现大量的代码重复，会增加了代码为维护的复杂度；由于代理类和委托类实现了相同的接口，若接口增加一个方法，不仅在所有委托类上实现此方法，则在所有的代理类也需要实现此方法；
2.代理对象只服务于一种类型的对象，如果服务多类型的对象，势必要为每一种对象都进行代理，这就产生了代码冗余的问题；因此静态代理在程序规模稍微大就无法胜任了。
要想解决就要用到动态代理；