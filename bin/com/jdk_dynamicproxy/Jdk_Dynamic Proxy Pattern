其实，动态代理算不上是一种设计模式，因为它是java提供的，不需要我们自己设计；
需要用 java.lang.raflect.InvocationHandler接口和java.lang.reflect.Proxy类的支持；

静态代理只能为一个接口服务，而且是在编译时就确定了被代理的对象；
而动态代理是在运行时，通过反射机制实现动态代理，而且能够代理各种类型的对象；

优点：
	能将接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）;
无需向静态代理那样进行每个方法的中转，可以灵活处理；而且是我们的类职责更加单一，复用性更强；

缺点：JDK实现动态代理需要实现类通过接口定义业务方法，对于没有接口的类，这就需要CGLib来实现动态代理。

