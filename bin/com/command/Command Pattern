命令设计模式：  简单来说就是对命令的封装;把一个请求或者操作封装成一个对象，可以把发出命令的责任和执行责任分割开，委派给不同的对象；
			      对请求排队或记录请求日志，可以提供命令的撤销和恢复功能；
                              

命令模式的基本结构：
Invoker类：调用者，负责调用命令(发布命令【一般通过特定的方法来设置具体的命令】和让命令执行，即：调用命令的exexute()方法【其实内部去接收者去执行命令】)；
Command类；一个抽象类，有一个执行命令的方法execute();
ConcreteCommand类：Command类的实现类，对exexute()自定义,可以有多个；一般可通过构造函数指定接收者，在execute()中决定了让接收者去执行命令； 
Receiver类：接收者，负责接收并执行命令; 可以声明成抽象类，实际的执行由其子类接收者们完成；  

优点：解耦了调用者和接受者之间的联系，调用者无需知道接收者任何接口； 只要去上让命令执行就可以了；
缺点：可能会造成过多的具体命令类；

应用场景： 
	1.在某些情况下用了一种专门的类（即：Command类），对类对象之间的调用加以封装时；
	2.调用过程比较复杂或存在多处这种调用时，加以封装，便于功能的再利用；
	3.调用奖后需要对调用参数进行某些处理；
	4.调用奖后需要进行某些处理,例如：日志，缓存，记录操作等；
